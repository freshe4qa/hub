syntax = "proto3";
package mars.shuttle.v1beta1;

option go_package = "github.com/mars-protocol/hub/x/shuttle/types";

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

// Msg defines the module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // RegisterAccount is a governance operation for registering a new interchain
  // account on the specified connection.
  //
  // This can only be invoked if there isn't already an account registered at
  // the given connection id.
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse);
}

// MsgRegisterAccount is the request type for the Msg/RegisterAccount RPC method.
//
// This message is typically executed via a governance proposal with the gov
// module being the executing authority.
message MsgRegisterAccount {
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the account executing this message.
  // It is typically the x/gov module account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // ConnectionId is the identifier of the connection on which the interchain
  // account is to be registered.
  //
  // Note that only one account per connection id is allowed.
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
}

// MsgRegisterAccountResponse is the response type for the Msg/RegisterAccount
// RPC method.
message MsgRegisterAccountResponse {}
